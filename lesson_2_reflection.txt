git init -create repository
What happens when you initialize a repository? Why do you need to do it?
when we initialize repository it creates .git file. but it doesn't do commit. it doesn't track any files. we have to manually do first commit and add files to tracking list.
git status : status of git repository
git add: add files to be tracked to staging area.
If you accidentally add a file to the staging area, you can remove it using git reset.

Concept Map: init, add, staging area
We’ve introduced a few new concepts since we last revisited our concept map.
git init
git add
git status
staging area
working directory

How is the staging area different from the working directory and the repository? What value do you think it offers?
working directory contain all files, repository have track of all commited files.

staging area is used to specifying exactly what chnages to be commited

If you use an issue tracker, put references to them at the bottom,y 
like this:
Resolves: #123
See also: #456, #789

git diff (with no argument) : compares working directory and staging area
git diff --staged : comares satging area with latest commit
git reset -- hard : its hard reset, where working directory is reset to latest commit

How can you use the staging area to make sure you have one commit per logical change?
by using git diff --staged, we can ensure that we have one commit per logical change. (not sure if this is sufficient answer)

Branches

git branch (no argument) :shows all branches
git branch --name-- : creates branch with that name

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
-when we are expermenting with code
-different language code
-create different products based on same base product
-different piece of work, feature,bug
-master branch production quality , development branch, expermentation branch
-compartmentalise 

git log --graph --oneline ________ __________ : this will give you graph of two branches.

git checkout -b new_branch_name : create and checkout branch

How do the diagrams help you visualize the branch structure?
it gives complete idea of structure in one glance

git show:diff between commit and its 

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
merge commit have two parents

git branch -d coins : delete branch name "coins"

What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
automatic merging code may get repeated, code or function which are not related get included unnecessaryly. increases size of code.
manually we have to look at every line of code.tedious